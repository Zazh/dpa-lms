from django.contrib import admin
from django.utils.html import format_html
from .models import Course, Lesson, CourseEnrollment, LessonProgress, LessonMaterial


class LessonMaterialInline(admin.TabularInline):
    """Inline –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —É—Ä–æ–∫–∞"""
    model = LessonMaterial
    extra = 1
    fields = ('title', 'description', 'file', 'url', 'order')


class LessonInline(admin.TabularInline):
    """Inline –¥–ª—è —É—Ä–æ–∫–æ–≤ –≤ –∫—É—Ä—Å–µ"""
    model = Lesson
    extra = 1
    fields = ('order', 'title', 'video_url', 'requires_previous_completion', 'is_active')
    ordering = ['order']


class CourseEnrollmentInline(admin.TabularInline):
    """Inline –¥–ª—è –∑–∞–ø–∏—Å–µ–π —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –Ω–∞ –∫—É—Ä—Å"""
    model = CourseEnrollment
    extra = 0
    readonly_fields = ('enrolled_at', 'get_progress')
    fields = ('user', 'enrolled_at', 'get_progress')

    def get_progress(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞"""
        if obj.pk:
            progress = obj.get_progress_percentage()
            color = 'green' if progress == 100 else 'orange' if progress > 50 else 'red'
            return format_html(
                '<span style="color: {}; font-weight: bold;">{:.1f}%</span>',
                color, progress
            )
        return '-'

    get_progress.short_description = '–ü—Ä–æ–≥—Ä–µ—Å—Å'


@admin.register(Course)
class CourseAdmin(admin.ModelAdmin):
    list_display = ('title', 'get_lessons_count', 'get_students_count', 'is_active', 'created_at')
    list_filter = ('is_active', 'created_at')
    search_fields = ('title', 'description')
    readonly_fields = ('created_at', 'updated_at')
    inlines = [LessonInline, CourseEnrollmentInline]

    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('title', 'description', 'created_by', 'is_active')
        }),
        ('–î–∞—Ç—ã', {
            'fields': ('created_at', 'updated_at'),
            'classes': ('collapse',)
        }),
    )

    def get_lessons_count(self, obj):
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–∫–æ–≤"""
        count = obj.get_total_lessons()
        return format_html('<b>{}</b>', count)

    get_lessons_count.short_description = '–£—Ä–æ–∫–æ–≤'

    def get_students_count(self, obj):
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤"""
        count = obj.get_enrolled_students_count()
        return format_html('<b>{}</b>', count)

    get_students_count.short_description = '–°—Ç—É–¥–µ–Ω—Ç–æ–≤'

    def save_model(self, request, obj, form, change):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Å–æ–∑–¥–∞—Ç–µ–ª—è –∫—É—Ä—Å–∞"""
        if not change:
            obj.created_by = request.user
        super().save_model(request, obj, form, change)


@admin.register(Lesson)
class LessonAdmin(admin.ModelAdmin):
    list_display = (
    'get_lesson_title', 'course', 'order', 'has_video', 'get_materials_count', 'requires_previous_completion',
    'is_active')
    list_filter = ('course', 'requires_previous_completion', 'is_active', 'created_at')
    search_fields = ('title', 'description', 'course__title')
    readonly_fields = ('created_at', 'updated_at')
    inlines = [LessonMaterialInline]

    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('course', 'title', 'description', 'content')
        }),
        ('–í–∏–¥–µ–æ', {
            'fields': ('video_url', 'video_duration', 'timecodes'),
            'description': '–¢–∞–π–º–∫–æ–¥—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON: [{"time": "00:30", "title": "–í–≤–µ–¥–µ–Ω–∏–µ"}, {"time": "05:15", "title": "–û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å"}]'
        }),
        ('–ù–∞—Å—Ç—Ä–æ–π–∫–∏', {
            'fields': ('order', 'requires_previous_completion', 'is_active')
        }),
        ('–î–∞—Ç—ã', {
            'fields': ('created_at', 'updated_at'),
            'classes': ('collapse',)
        }),
    )

    def get_lesson_title(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Ä–æ–∫–∞ —Å –Ω–æ–º–µ—Ä–æ–º"""
        return f"{obj.order}. {obj.title}"

    get_lesson_title.short_description = '–£—Ä–æ–∫'

    def has_video(self, obj):
        """–ï—Å—Ç—å –ª–∏ –≤–∏–¥–µ–æ"""
        if obj.video_url:
            return format_html('<span style="color: green;">‚úì</span>')
        return format_html('<span style="color: red;">‚úó</span>')

    has_video.short_description = '–í–∏–¥–µ–æ'

    def get_materials_count(self, obj):
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"""
        count = obj.materials.count()
        return format_html('<b>{}</b>', count) if count > 0 else '-'

    get_materials_count.short_description = '–ú–∞—Ç–µ—Ä–∏–∞–ª–æ–≤'


@admin.register(LessonMaterial)
class LessonMaterialAdmin(admin.ModelAdmin):
    list_display = ('title', 'lesson', 'get_type', 'file_size_display', 'order', 'created_at')
    list_filter = ('lesson__course', 'file_type', 'created_at')
    search_fields = ('title', 'description', 'lesson__title')
    readonly_fields = ('file_size', 'file_type', 'created_at')

    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('lesson', 'title', 'description', 'order')
        }),
        ('–§–∞–π–ª –∏–ª–∏ —Å—Å—ã–ª–∫–∞', {
            'fields': ('file', 'url', 'file_size', 'file_type'),
            'description': '–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –ò–õ–ò —É–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É (–Ω–µ –æ–±–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ)'
        }),
        ('–î–∞—Ç—ã', {
            'fields': ('created_at',)
        }),
    )

    def get_type(self, obj):
        """–¢–∏–ø –º–∞—Ç–µ—Ä–∏–∞–ª–∞"""
        if obj.file:
            return format_html('<span style="color: blue;">üìÑ –§–∞–π–ª ({})</span>', obj.file_type.upper())
        elif obj.url:
            return format_html('<span style="color: green;">üîó –°—Å—ã–ª–∫–∞</span>')
        return '-'

    get_type.short_description = '–¢–∏–ø'

    def file_size_display(self, obj):
        """–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        if obj.file_size:
            if obj.file_size < 1024:
                return f"{obj.file_size} –ë"
            elif obj.file_size < 1024 * 1024:
                return f"{obj.file_size / 1024:.1f} –ö–ë"
            else:
                return f"{obj.file_size / (1024 * 1024):.1f} –ú–ë"
        return '-'

    file_size_display.short_description = '–†–∞–∑–º–µ—Ä'


@admin.register(CourseEnrollment)
class CourseEnrollmentAdmin(admin.ModelAdmin):
    list_display = ('user', 'course', 'get_progress_display', 'enrolled_at')
    list_filter = ('course', 'enrolled_at')
    search_fields = ('user__email', 'user__first_name', 'user__last_name', 'course__title')
    readonly_fields = ('enrolled_at', 'get_progress_display')

    fieldsets = (
        ('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('user', 'course', 'enrolled_at', 'get_progress_display')
        }),
    )

    def get_progress_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å —Ü–≤–µ—Ç–æ–º"""
        if obj.pk:
            progress = obj.get_progress_percentage()
            color = 'green' if progress == 100 else 'orange' if progress > 50 else 'red'
            return format_html(
                '<div style="background: {}; color: white; padding: 5px 10px; border-radius: 5px; text-align: center; width: 80px;">'
                '<b>{:.1f}%</b></div>',
                color, progress
            )
        return '-'

    get_progress_display.short_description = '–ü—Ä–æ–≥—Ä–µ—Å—Å'


@admin.register(LessonProgress)
class LessonProgressAdmin(admin.ModelAdmin):
    list_display = ('user', 'get_lesson_info', 'is_completed', 'started_at', 'completed_at')
    list_filter = ('is_completed', 'lesson__course', 'started_at', 'completed_at')
    search_fields = ('user__email', 'user__first_name', 'user__last_name', 'lesson__title')
    readonly_fields = ('started_at', 'completed_at')

    fieldsets = (
        ('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('user', 'lesson', 'is_completed')
        }),
        ('–î–∞—Ç—ã', {
            'fields': ('started_at', 'completed_at')
        }),
    )

    def get_lesson_info(self, obj):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Ä–æ–∫–µ"""
        return format_html(
            '<b>{}</b><br><small>{}</small>',
            obj.lesson.course.title,
            obj.lesson.title
        )

    get_lesson_info.short_description = '–ö—É—Ä—Å / –£—Ä–æ–∫'